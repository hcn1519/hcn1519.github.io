---
layout: post
title: "FCM Push 연동"
excerpt: "FCM을 iOS에 연동할 때 필요한 내용에 대해 정리하였습니다."
date: "2018-10-14 18:25:36 +0900"
categories: iOS WWDC Memory Instrument
tags: [iOS, WWDC, Memory, Instrument]

---

FCM은 `Firebase Cloud Messaging`의 약자로 Firebase에서 지원하는 Push 알림 API입니다. 많은 앱의 경우 iOS만 지원하지 않고, 안드로이드, 웹등의 플랫폼도 같이 지원하기 때문에 Push 알림 기능을 구현할 때 각 플랫폼 별로 서버에서 따로 처리해야 하는 부분이 많습니다. FCM은 이 과정을 담당하고, 심지어 Firebase가 지원하는 콘솔을 통해서 이 Push 알림을 관리할 수 있도록 해주기 때문에 여러모로 유용합니다. 이 글에서는 FCM을 구현하면서 겪었던, 혹은 알아야 하는 부분에 대해서 알아보고자 합니다.


## About FCM

* FCM은 현재 2개의 API를 통해 제공한다. 그 중, [HTTP v1 API](https://firebase.google.com/docs/cloud-messaging/migrate-v1)가 최신이다.


FCM 문서를 보면, 서로 다른 URI에 보내는 API가 존재합니다.

```
// 이전
POST https://fcm.googleapis.com/fcm/send

// 최신
POST https://fcm.googleapis.com/v1/projects/myproject-b5ae1/messages:send
```

FCM이 제공하는 API 중 `HTTP v1 API`를 사용하는 것이 좋습니다. Push 알림은 플랫폼 별로 key 값이 서로 다른 동작을 하는 부분이 있습니다. 그래서 이전 API에서는 iOS에 보내는 payload와 안드로이드에 보내는 payload가 일치하여도 서로 다른 동작을
하는 경우가 있습니다. 이전 API에서는 이를 사용자의 API 서버에서 분기처리하는 형태로 구현해야 하지만, `HTTP v1 API`는 `android`, `aps` 등의 key를 통해 서로 다른 작업을 동일한 메시지에서 처리할 수 있도록 해줍니다.

```json
{
  "message": {
    "topic": "news",
    "notification": {
      "title": "Breaking News",
      "body": "New news story available."
    },
    "android": {
      "notification": {
        "click_action": "TOP_STORY_ACTIVITY"
      }
    },
    "aps": {
      "payload": {
        "aps": {
          "category" : "NEW_MESSAGE_CATEGORY"
        }
      }
    }
  }
}
```

* APN 인증 키 혹은 APN 인증서 1개만 업데이트하면 된다. 다만, APN 인증 키를 사용하는 것이 최신이다.
* Firebase 콘솔에서 설정하는 APN 인증 키는 1번 설정하면 업데이트 하지 않아도 된다.


## About Notification

* entitlement 파일에 필요한 부분

```xml
<plist version="1.0">
  <dict>
  	<key>aps-environment</key>
  	<string>development</string>
  </dict>
</plist>
```


iOS에서 Push 알림을 전달하기 위해서는 `APNs(Apple Push Notification System)` 서버에 알맞은 json payload를 전달해야 합니다.

# UNUserNotificationCenter
1. 권한 요청
requestAuthorization

유저의 인터랙션에 따라 적절히 처리한다.

getNotificationSettings

## Local notification
* alert, sound, badge를 설정할 수 있다.
* Notification의 전달은 설정한 시간, 위치에 따라 시스템을 통해 전달된다.
* 앱이 background이거나 꺼져있을 경우 시스템에서 유저를 위해 작업을 수행한다.
* 앱이 foreground일 경우에는 시스템은 앱으로 notification을 전달한다.

### Notification Content
`UNMutableNotificationContent` 객체를 생성하여 전달할 notification의 내용을 설정할 수 있다.

### Notification 전달 방식 설정
* 어떤 방식(시간, 위치)을 통해 notification을 전달할지에 따라 ~ 객체들 중 하나를 선택한다.

### Notification Request의 생성과 등록
* `UNNotificationRequest`을 생성하여 request를 생성한다.
* `UNUserNotificationCenter`에 해당 request를 등록한다.

—
# Handling Notifications and Notification-Related Actions
* 사용자의 행동에 반응하는 방식에 대해 설명

1. Notification 인터페이스에서 사용자의 선택에 따른 action
2. Foreground 상태에서 notification 처리
3. Silent notification 처리
4. PushKit과 관련된 notification 처리

## Handle User-Selected Actions
* 유저가 notification 인터페이스를 누르거나, 그 안의 특정 버튼을 눌렀을 때, 앱은 이에 대해 반응할 수 있다.
* 유저가 notification을 누르면, 싱글톤으로 선언된 `UNUserNotificationCenter`의 delegate 메소드가 호출된다.
* 좀 더 정확히는 앱이 background에서 실행되고, didReceive delegate 메소드가 호출된다.
* Action Identifier를 상황별로 설정하여 didReceive delegate에서 적절한 처리를 해주어야 한다.

## Handle Notifications While Your App Runs in the Foreground

* 앱이 foreground 상태에서 notification이 전달되면, willPresent delegate가 전달된다.
* 적절한 action identfier를 통해 동작 처리한다.
—

## Pushing Updates to Your App Silently

* Silent notification을 받으면

# 참고자료
[Scheduling a notification locally from your app](https://developer.apple.com/documentation/usernotifications/scheduling_a_notification_locally_from_your_app)
[Handling notification and notification related settings](https://developer.apple.com/documentation/usernotifications/handling_notifications_and_notification-related_actions)
